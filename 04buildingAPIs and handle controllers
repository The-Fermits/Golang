package main

import (
	"encoding/json"
	"fmt"
	"math/rand" // This is the correct package for random numbers
	"net/http"
	"strconv"
	"time"

	"github.com/google/uuid"
	"github.com/gorilla/mux"
)

type Course struct {
	CourseId string `json:"courseid"`
	Price    int    `json:"price"`
	Author   *Author
}

type Author struct {
	FullName string `json:"fullname"`
	Age      int    `json:"author_age"`
}

// fake data base
var Courses []Course

func IsEmpty(c *Course) bool {
	return c.CourseId == "" && c.Price == 0 // very bad logic i know
}

// serve Home Route
func serveHome(w http.ResponseWriter, r *http.Request) {
	w.Write([]byte("<h1>I am HTML who serving Home route here </h1>"))
}

func getAllCourses(w http.ResponseWriter, r *http.Request) {
	// use chatGPT to understand these kind of syntax
	fmt.Println("we will get all the courses here:")
	w.Header().Set("content-type", "application/json")
	json.NewEncoder(w).Encode(Courses)

}

func getOneCourse(w http.ResponseWriter, r *http.Request) {
	// grabe id from request , search it and return
	fmt.Println("Hey need a value for given id:")
	params := mux.Vars(r) // key- value pair

	for _, course := range Courses {
		if course.CourseId == params["id"] {
			json.NewEncoder(w).Encode(course)
			return
		}
	}

	json.NewEncoder(w).Encode("No course match with given id")
}

func createOneCourse(w http.ResponseWriter, r *http.Request) {
	// use r.Body as value to create a unique id - value pair
	w.Header().Set("content-type", "application/json")

	// what id Body is empty
	if r.Body == nil {
		json.NewEncoder(w).Encode("Please send some data")
		return
	}

	var course Course
	// decode data
	_ = json.NewDecoder(r.Body).Decode(&course)

	if IsEmpty(&course) {
		json.NewEncoder(w).Encode("Please send some data")
		return
	}

	//now generate a unique id (create as a string) then append this course in courses
	rand.Seed(time.Now().UnixNano())                  
	course.CourseId = strconv.Itoa(rand.Intn(100000)) // Generate random ID between 0-99999

	// better way to do this : 
	course.CourseId = uuid.New().String()
	Courses = append(Courses, course)

	json.NewEncoder(w).Encode(course)
}


func updateOneCourse (w http.ResponseWriter, r *http.Request){

fmt.Println("This is where we will update our course:")
w.Header().Set("content-type","application/json")

// grab id from request, value form r.body and update that 
// first delete then append new one 

params := mux.Vars(r)


var course Course
for index, course1 := range Courses {
if course1.CourseId == params ["id"]  {
	Courses = append(Courses[:index], Courses[index+1:]...)
	_ = json.NewDecoder(r.Body).Decode(& course)
    course.CourseId = params["id"]
	Courses = append(Courses, course)
	json.NewEncoder(w).Encode(Courses)
}
}

// handle other edge cases carefully 

}

func h (w http.ResponseWriter, r *http.Request){
	// same as above deletion of course in updateOneCourse function 
}





func main() {
	fmt.Println("Welcome to build API and handle controller:")

}
